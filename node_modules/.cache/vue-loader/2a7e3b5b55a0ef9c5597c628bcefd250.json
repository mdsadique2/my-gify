{"remainingRequest":"/Codes/my-gify/node_modules/vue-loader/lib/index.js??vue-loader-options!/Codes/my-gify/src/pages/SearchPage.vue?vue&type=style&index=0&id=284b9b99&scoped=true&lang=css&","dependencies":[{"path":"/Codes/my-gify/src/pages/SearchPage.vue","mtime":1565699864989},{"path":"/Codes/my-gify/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.stickyContent{\n  width: 100%;\n  position: fixed;\n  top:0;\n  left: 0;\n  background: #fff;\n  z-index: 1000;\n  box-shadow: 0px 0px 5px 5px #ccc;\n\n}\n.resultHeader {\n  border-bottom: 1px solid #ddd;\n  width: 100%;\n  padding: 10px;\n  margin: 0 auto;\n}\n.groups {\n  overflow: auto;\n  text-align: left;\n  padding: 15px;\n  max-height: 120px\n}\n.groups.hide{\n  padding: 0px;\n  height: 0px;\n}\n.groups .title{\n  margin-bottom: 10px;\n}\n.groups .title.hover:hover {\n  color: #479b49;\n  transition: all 0.25s ease;\n}\n.scrollTopButton{\n  position: fixed;\n  bottom: 10px;\n  right: 10px;\n  font-size: 30px;\n  color: rgba(0,0,0,0.5);\n  cursor: pointer;\n}\n.scrollTopButton:hover{\n  color: #479b49;\n}\n",{"version":3,"sources":["SearchPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SearchPage.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div>\n    <!-- top stcky portion with searchbar and category tags -->\n    <div class=\"stickyContent\">\n      <search @searchFunction=\"searchThisInput\" :inputValueText='currentSearchQuery' :categoryOptions=\"categories\"></search>\n      <div class=\"categoryPanel groups\">\n        <div class=\"category\" v-if=\"showCategory\">\n          <div class=\"title\">Available Categories:</div>\n          <div>\n            <div class=\"displayInlineBlock\" v-bind:key=\"index\" v-for=\"(category, index) in categories\" >\n              <span class=\"tags left clickBg\"  @click=\"getGifForCategory(category)\">{{category.name}}</span>\n              <i class=\"tags right clickBg fas fa-caret-down\" @click=\"selectCategory(index)\"></i>\n            </div>\n          </div>\n        </div>\n        <div class=\"subCategory\" v-if=\"!showCategory\">\n          <div @click=\"showCategoryPanel()\" class=\"cursorPointer title hover displayInlineBlock\">\n            <i class=\"navigateIcons navigateIcon--left  fas fa-arrow-circle-left\"></i>\n            Subategories for <strong>'{{selectedCategory.name}}'</strong>:\n          </div>\n          <div>\n            <button v-bind:key=\"index\" class=\"tags clickBg\" v-for=\"(subCategory, index) in selectedCategory.subcategories\" @click=\"selectSubCategory(index)\">{{subCategory.name}}</button>\n          </div>\n        </div>\n      </div>\n      <!--  to display info about search -->\n      <div class=\"resultHeader textAlignLeft\">\n        {{currentMessage}}\n      </div>\n    </div>\n\n    <!--  Search result container that create grids of gif with search result -->\n    <searchResults\n      :searchKey=\"searchKeyText\"\n      :loader=\"fetchingGifs\"\n      :responseObj=\"responseData\"\n      :concatResults=\"concateIt\"\n      :searchType=\"currentSearchType\"\n      @searchAsTextFunction=\"searchSubcategoryAsText\"\n      :style=\"{'margin-top': stickyHeight}\">\n    </searchResults>\n\n    <!-- clicking the button scrolls to the top -->\n    <div class=\"scrollTopButton\" @click=\"scrollToTop()\">\n      <i class=\"fas fa-arrow-circle-up\"></i>\n    </div>\n  </div>\n</template>\n\n<script>\nimport search from '../components/search.vue'\nimport searchResults from '../components/searchResults.vue'\nimport commons from '../utils/common.js'\n\nimport Gify from '../sdk/gify'\n\nexport default {\n  name: 'SearchPage',\n  components: {\n    search,\n    searchResults\n  },\n  mounted () {\n    (document.body).addEventListener('scroll', this.updateScroll);\n  },\n\n  created () {\n    this.getCategories();\n    this.getTrendingGifs();\n    setTimeout(this.calculateStickyHeight, 1000);\n  },\n  computed: {\n    currentMessage () {\n      var obj = {\n        subCategory: 'Showing result for Subcategory :' + this.searchKeyText,\n        category: 'Showing result for Category : ' + this.searchKeyText,\n        trending: 'Trending GIFs !',\n        query: 'Showing result for text : ' + this.searchKeyText\n      }\n      return obj[this.currentSearchType]\n    }\n  },\n  data () {\n    return {\n      responseData: {},\n      page: 0,\n      fetchingGifs: false,\n      scrollPosition: null,\n      categories: [],\n      selectedCategory: {},\n      showCategory: true,\n      concateIt: false,\n      categoryPanel: null,\n      categoryPanelScrollHide: false,\n      stickyHeight: '100px',\n      currentSubCategory: '',\n      currentSearchedText: '',\n      currentSearchType: '',\n      currentSearchQuery: '',\n      currentCategory: '',\n      searchKeyText: ''\n    }\n  },\n\n  methods: {\n    scrollToTop () {\n      document.body.scrollTo(0, 0);\n    },\n\n    calculateStickyHeight () {\n      var elm = (document.getElementsByClassName('stickyContent'))[0];\n      var height = elm.clientHeight;\n      this.stickyHeight = (height - 1) + 'px';\n    },\n\n    // selection of a category\n    selectCategory (index) {\n      this.selectedCategory = this.categories[index];\n      this.showCategory = false;\n    },\n\n    // fired when search input is filled\n    searchThisInput (inputVal) {\n      var queryText = inputVal;\n      if (typeof inputVal !== 'string') {\n        queryText = inputVal.name\n        this.currentSearchQuery = queryText;\n      }\n      this.getResult(queryText)\n    },\n\n    // switches between category and subcategory\n    showCategoryPanel () {\n      this.showCategory = true;\n    },\n\n    resetCategoryPanelHeight (type) {\n      if (!this.categoryPanel) {\n        this.categoryPanel = (document.getElementsByClassName('categoryPanel'))[0];\n      }\n      if (type === 'show') {\n        this.categoryPanel.classList.remove('hide');\n      } else {\n        this.categoryPanel.classList.add('hide');\n      }\n    },\n\n    // events with body scroll\n    updateScroll (event) {\n      this.scrollPosition = window.scrollTop;\n      var element = event.target;\n      if (element.scrollTop > 60 && this.categoryPanelScrollHide === false) {\n        this.categoryPanelScrollHide = true;\n        this.resetCategoryPanelHeight('hide', element.scrollTop);\n      } else if (element.scrollTop < 60 && this.categoryPanelScrollHide === true){\n        this.categoryPanelScrollHide = false;\n        this.resetCategoryPanelHeight('show', element.scrollTop);\n      }\n      if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n        this.fetchApi();\n      }\n    },\n\n    // scroll checks and call the required api\n    fetchApi: commons.debounce( function() {\n      if (this.fetchingGifs === true) {\n        return\n      }\n      if (this.currentSearchType === 'subCategory') {\n        this.selectSubCategory(this.currentSubCategory)\n      } else if (this.currentSearchType === 'category') {\n        this.getGifForCategory(this.currentCategory);\n      } else if (this.currentSearchType === 'trending') {\n        this.getTrendingGifs();\n      } else {\n        this.getResult(this.currentSearchedText);\n      }\n    },500),\n\n    stopLoader () {\n      var that = this;\n      setTimeout(function(){\n        that.fetchingGifs = false;\n      }, 1000)\n    },\n\n    // not in use now\n    searchSubcategoryAsText () {\n      this.currentSearchQuery = this.currentSubCategory;\n      this.getResult(this.currentSubCategory);\n    },\n\n    // gets list of categories\n    getCategories () {\n      Gify.categoriesForGifs({})\n      .then((response) => {\n        this.categories = response.data;\n      })\n      .catch(() => {\n      })\n    },\n\n    // to fetch gif of a category\n    getGifForCategory (category) {\n      if (this.currentSearchType !== 'category') {\n        this.currentSearchType = 'category';\n        this.concateIt = false;\n        this.page = 0;\n      }\n\n      this.searchKeyText = category.name;\n      if (this.currentCategory === category.name) {\n        this.concateIt = true;\n      } else {\n        this.concateIt = false;\n        this.currentCategory = category.name\n      }\n      this.fetchingGifs = true;\n      Gify.subCategoriesForGifs(this.currentCategory, {\n        offset: this.page++,\n      })\n      .then((response) => {\n        this.responseData = response;\n        this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n\n    },\n\n    // to fetch gif of a subcategory\n    selectSubCategory (index) {\n      var subCategory = index;\n      if (typeof index === 'number'){\n        subCategory = this.selectedCategory.subcategories[index].name;\n      }\n      this.showCategory = false;\n      if (this.currentSearchType !== 'subCategory') {\n        this.currentSearchType = 'subCategory';\n        this.concateIt = false;\n        this.page = 0;\n      }\n      this.searchKeyText = subCategory;\n      if (this.currentSubCategory === subCategory) {\n        this.concateIt = true;\n      } else {\n        this.concateIt = false;\n        this.currentSubCategory = subCategory\n      }\n      this.fetchingGifs = true;\n\n      Gify.gifsByCategories(this.selectedCategory.name, subCategory, {\n        offset: this.page++,\n      })\n      .then((response) => {\n        this.responseData = response;\n        this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n    },\n\n    // to fetch gif of a search keyword\n    getResult (queryText) {\n      if (queryText.trim() === \"\") {\n        this.getTrendingGifs();\n        return;\n      }\n      if (this.currentSearchType !== 'query') {\n        this.currentSearchType = 'query';\n        this.concateIt = false;\n        this.page = 0;\n      }\n      this.searchKeyText = queryText;\n      if (this.currentSearchedText === queryText) {\n        this.concateIt = true;\n      } else {\n        this.currentSearchedText = queryText\n        this.concateIt = false;\n      }\n      this.fetchingGifs = true;\n      Gify.search('gifs', {\n          \"q\": queryText,\n          offset: this.page++,\n        }).then((response) => {\n          this.responseData = response;\n          this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n    },\n\n    // to fetch gif trending\n    getTrendingGifs () {\n      if (this.currentSearchType !== 'trending') {\n        this.currentSearchType = 'trending';\n        this.concateIt = false;\n        this.page = 0;\n      } else {\n        this.concateIt = true;\n      }\n      this.fetchingGifs = true;\n      Gify.trending(\"gifs\", {\n        offset: this.page++,\n      })\n      .then((response) => {\n        this.responseData = response;\n        this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  .stickyContent{\n    width: 100%;\n    position: fixed;\n    top:0;\n    left: 0;\n    background: #fff;\n    z-index: 1000;\n    box-shadow: 0px 0px 5px 5px #ccc;\n\n  }\n  .resultHeader {\n    border-bottom: 1px solid #ddd;\n    width: 100%;\n    padding: 10px;\n    margin: 0 auto;\n  }\n  .groups {\n    overflow: auto;\n    text-align: left;\n    padding: 15px;\n    max-height: 120px\n  }\n  .groups.hide{\n    padding: 0px;\n    height: 0px;\n  }\n  .groups .title{\n    margin-bottom: 10px;\n  }\n  .groups .title.hover:hover {\n    color: #479b49;\n    transition: all 0.25s ease;\n  }\n  .scrollTopButton{\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    font-size: 30px;\n    color: rgba(0,0,0,0.5);\n    cursor: pointer;\n  }\n  .scrollTopButton:hover{\n    color: #479b49;\n  }\n</style>\n"]}]}