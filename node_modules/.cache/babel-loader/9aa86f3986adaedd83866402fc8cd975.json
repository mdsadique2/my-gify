{"remainingRequest":"/Codes/my-gify/node_modules/babel-loader/lib/index.js!/Codes/my-gify/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Codes/my-gify/node_modules/vue-loader/lib/index.js??vue-loader-options!/Codes/my-gify/src/components/search.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Codes/my-gify/src/components/search.vue","mtime":1565683599558},{"path":"/Codes/my-gify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\nimport commons from '../utils/common.js';\nexport default {\n  name: 'search',\n  props: {\n    inputValueText: {\n      type: String,\n      default: ''\n    },\n    searchFunction: {\n      type: Function,\n      default: function _default() {}\n    },\n    categoryOptions: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      searchText: '',\n      selectedCategory: {}\n    };\n  },\n  methods: {\n    searchForText: commons.debounce(function () {\n      this.$emit('searchFunction', this.searchText);\n    }, 500)\n  },\n  watch: {\n    inputValueText: function inputValueText(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.searchText = newVal;\n      }\n    }\n  }\n};",{"version":3,"sources":["search.vue"],"names":[],"mappings":";;;;;;;;;AAWA,OAAA,OAAA,MAAA,oBAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KADA;AAKA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CACA;AAHA,KALA;AAUA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA;AAVA,GAFA;AAmBA,EAAA,IAnBA,kBAmBA;AACA,WAAA;AACA,MAAA,UAAA,EAAA,EADA;AAEA,MAAA,gBAAA,EAAA;AAFA,KAAA;AAIA,GAxBA;AAyBA,EAAA,OAAA,EAAA;AACA,IAAA,aAAA,EAAA,OAAA,CAAA,QAAA,CAAA,YAAA;AACA,WAAA,KAAA,CAAA,gBAAA,EAAA,KAAA,UAAA;AACA,KAFA,EAEA,GAFA;AADA,GAzBA;AA8BA,EAAA,KAAA,EAAA;AACA,IAAA,cADA,0BACA,MADA,EACA,MADA,EACA;AACA,UAAA,MAAA,KAAA,MAAA,EAAA;AACA,aAAA,UAAA,GAAA,MAAA;AACA;AACA;AALA;AA9BA,CAAA","sourcesContent":["<template>\n  <div>\n      <div class=\"width50 searchForm displayFlex\">\n          <input class=\"searchInput\" placeholder=\"Search...\" @input=\"searchForText($event)\" v-model=\"searchText\"/>\n          <i class=\"searchIcon fas fa-search\"></i>\n      </div>\n  </div>\n</template>\n\n<script>\n\nimport commons from '../utils/common.js'\nexport default {\n  name: 'search',\n  props: {\n    inputValueText: {\n      type: String,\n      default: ''\n    },\n    searchFunction: {\n      type: Function,\n      default: () => {\n      }\n    },\n    categoryOptions: {\n      type: Array,\n      default: () => {\n        return []\n      }\n    }\n  },\n  data () {\n    return {\n      searchText: '',\n      selectedCategory: {}\n    }\n  },\n  methods: {\n    searchForText: commons.debounce(function () {\n      this.$emit('searchFunction', this.searchText);\n    }, 500)\n  },\n  watch: {\n    inputValueText (newVal, oldVal) {\n      if (newVal !== oldVal) {\n        this.searchText = newVal;\n      }\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\ninput {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n}\n</style>\n"],"sourceRoot":"src/components"}]}