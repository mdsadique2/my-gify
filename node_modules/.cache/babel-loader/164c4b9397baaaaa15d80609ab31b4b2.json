{"remainingRequest":"/Codes/my-gify/node_modules/babel-loader/lib/index.js!/Codes/my-gify/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Codes/my-gify/node_modules/vue-loader/lib/index.js??vue-loader-options!/Codes/my-gify/src/pages/SearchPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Codes/my-gify/src/pages/SearchPage.vue","mtime":1565699864989},{"path":"/Codes/my-gify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Codes/my-gify/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport search from '../components/search.vue';\nimport searchResults from '../components/searchResults.vue';\nimport commons from '../utils/common.js';\nimport Gify from '../sdk/gify';\nexport default {\n  name: 'SearchPage',\n  components: {\n    search: search,\n    searchResults: searchResults\n  },\n  mounted: function mounted() {\n    document.body.addEventListener('scroll', this.updateScroll);\n  },\n  created: function created() {\n    this.getCategories();\n    this.getTrendingGifs();\n    setTimeout(this.calculateStickyHeight, 1000);\n  },\n  computed: {\n    currentMessage: function currentMessage() {\n      var obj = {\n        subCategory: 'Showing result for Subcategory :' + this.searchKeyText,\n        category: 'Showing result for Category : ' + this.searchKeyText,\n        trending: 'Trending GIFs !',\n        query: 'Showing result for text : ' + this.searchKeyText\n      };\n      return obj[this.currentSearchType];\n    }\n  },\n  data: function data() {\n    return {\n      responseData: {},\n      page: 0,\n      fetchingGifs: false,\n      scrollPosition: null,\n      categories: [],\n      selectedCategory: {},\n      showCategory: true,\n      concateIt: false,\n      categoryPanel: null,\n      categoryPanelScrollHide: false,\n      stickyHeight: '100px',\n      currentSubCategory: '',\n      currentSearchedText: '',\n      currentSearchType: '',\n      currentSearchQuery: '',\n      currentCategory: '',\n      searchKeyText: ''\n    };\n  },\n  methods: {\n    scrollToTop: function scrollToTop() {\n      document.body.scrollTo(0, 0);\n    },\n    calculateStickyHeight: function calculateStickyHeight() {\n      var elm = document.getElementsByClassName('stickyContent')[0];\n      var height = elm.clientHeight;\n      this.stickyHeight = height - 1 + 'px';\n    },\n    // selection of a category\n    selectCategory: function selectCategory(index) {\n      this.selectedCategory = this.categories[index];\n      this.showCategory = false;\n    },\n    // fired when search input is filled\n    searchThisInput: function searchThisInput(inputVal) {\n      var queryText = inputVal;\n\n      if (typeof inputVal !== 'string') {\n        queryText = inputVal.name;\n        this.currentSearchQuery = queryText;\n      }\n\n      this.getResult(queryText);\n    },\n    // switches between category and subcategory\n    showCategoryPanel: function showCategoryPanel() {\n      this.showCategory = true;\n    },\n    resetCategoryPanelHeight: function resetCategoryPanelHeight(type) {\n      if (!this.categoryPanel) {\n        this.categoryPanel = document.getElementsByClassName('categoryPanel')[0];\n      }\n\n      if (type === 'show') {\n        this.categoryPanel.classList.remove('hide');\n      } else {\n        this.categoryPanel.classList.add('hide');\n      }\n    },\n    // events with body scroll\n    updateScroll: function updateScroll(event) {\n      this.scrollPosition = window.scrollTop;\n      var element = event.target;\n\n      if (element.scrollTop > 60 && this.categoryPanelScrollHide === false) {\n        this.categoryPanelScrollHide = true;\n        this.resetCategoryPanelHeight('hide', element.scrollTop);\n      } else if (element.scrollTop < 60 && this.categoryPanelScrollHide === true) {\n        this.categoryPanelScrollHide = false;\n        this.resetCategoryPanelHeight('show', element.scrollTop);\n      }\n\n      if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n        this.fetchApi();\n      }\n    },\n    // scroll checks and call the required api\n    fetchApi: commons.debounce(function () {\n      if (this.fetchingGifs === true) {\n        return;\n      }\n\n      if (this.currentSearchType === 'subCategory') {\n        this.selectSubCategory(this.currentSubCategory);\n      } else if (this.currentSearchType === 'category') {\n        this.getGifForCategory(this.currentCategory);\n      } else if (this.currentSearchType === 'trending') {\n        this.getTrendingGifs();\n      } else {\n        this.getResult(this.currentSearchedText);\n      }\n    }, 500),\n    stopLoader: function stopLoader() {\n      var that = this;\n      setTimeout(function () {\n        that.fetchingGifs = false;\n      }, 1000);\n    },\n    // not in use now\n    searchSubcategoryAsText: function searchSubcategoryAsText() {\n      this.currentSearchQuery = this.currentSubCategory;\n      this.getResult(this.currentSubCategory);\n    },\n    // gets list of categories\n    getCategories: function getCategories() {\n      var _this = this;\n\n      Gify.categoriesForGifs({}).then(function (response) {\n        _this.categories = response.data;\n      }).catch(function () {});\n    },\n    // to fetch gif of a category\n    getGifForCategory: function getGifForCategory(category) {\n      var _this2 = this;\n\n      if (this.currentSearchType !== 'category') {\n        this.currentSearchType = 'category';\n        this.concateIt = false;\n        this.page = 0;\n      }\n\n      this.searchKeyText = category.name;\n\n      if (this.currentCategory === category.name) {\n        this.concateIt = true;\n      } else {\n        this.concateIt = false;\n        this.currentCategory = category.name;\n      }\n\n      this.fetchingGifs = true;\n      Gify.subCategoriesForGifs(this.currentCategory, {\n        offset: this.page++\n      }).then(function (response) {\n        _this2.responseData = response;\n\n        _this2.stopLoader();\n      }).catch(function () {\n        _this2.stopLoader();\n      });\n    },\n    // to fetch gif of a subcategory\n    selectSubCategory: function selectSubCategory(index) {\n      var _this3 = this;\n\n      var subCategory = index;\n\n      if (typeof index === 'number') {\n        subCategory = this.selectedCategory.subcategories[index].name;\n      }\n\n      this.showCategory = false;\n\n      if (this.currentSearchType !== 'subCategory') {\n        this.currentSearchType = 'subCategory';\n        this.concateIt = false;\n        this.page = 0;\n      }\n\n      this.searchKeyText = subCategory;\n\n      if (this.currentSubCategory === subCategory) {\n        this.concateIt = true;\n      } else {\n        this.concateIt = false;\n        this.currentSubCategory = subCategory;\n      }\n\n      this.fetchingGifs = true;\n      Gify.gifsByCategories(this.selectedCategory.name, subCategory, {\n        offset: this.page++\n      }).then(function (response) {\n        _this3.responseData = response;\n\n        _this3.stopLoader();\n      }).catch(function () {\n        _this3.stopLoader();\n      });\n    },\n    // to fetch gif of a search keyword\n    getResult: function getResult(queryText) {\n      var _this4 = this;\n\n      if (queryText.trim() === \"\") {\n        this.getTrendingGifs();\n        return;\n      }\n\n      if (this.currentSearchType !== 'query') {\n        this.currentSearchType = 'query';\n        this.concateIt = false;\n        this.page = 0;\n      }\n\n      this.searchKeyText = queryText;\n\n      if (this.currentSearchedText === queryText) {\n        this.concateIt = true;\n      } else {\n        this.currentSearchedText = queryText;\n        this.concateIt = false;\n      }\n\n      this.fetchingGifs = true;\n      Gify.search('gifs', {\n        \"q\": queryText,\n        offset: this.page++\n      }).then(function (response) {\n        _this4.responseData = response;\n\n        _this4.stopLoader();\n      }).catch(function () {\n        _this4.stopLoader();\n      });\n    },\n    // to fetch gif trending\n    getTrendingGifs: function getTrendingGifs() {\n      var _this5 = this;\n\n      if (this.currentSearchType !== 'trending') {\n        this.currentSearchType = 'trending';\n        this.concateIt = false;\n        this.page = 0;\n      } else {\n        this.concateIt = true;\n      }\n\n      this.fetchingGifs = true;\n      Gify.trending(\"gifs\", {\n        offset: this.page++\n      }).then(function (response) {\n        _this5.responseData = response;\n\n        _this5.stopLoader();\n      }).catch(function () {\n        _this5.stopLoader();\n      });\n    }\n  }\n};",{"version":3,"sources":["SearchPage.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <!-- top stcky portion with searchbar and category tags -->\n    <div class=\"stickyContent\">\n      <search @searchFunction=\"searchThisInput\" :inputValueText='currentSearchQuery' :categoryOptions=\"categories\"></search>\n      <div class=\"categoryPanel groups\">\n        <div class=\"category\" v-if=\"showCategory\">\n          <div class=\"title\">Available Categories:</div>\n          <div>\n            <div class=\"displayInlineBlock\" v-bind:key=\"index\" v-for=\"(category, index) in categories\" >\n              <span class=\"tags left clickBg\"  @click=\"getGifForCategory(category)\">{{category.name}}</span>\n              <i class=\"tags right clickBg fas fa-caret-down\" @click=\"selectCategory(index)\"></i>\n            </div>\n          </div>\n        </div>\n        <div class=\"subCategory\" v-if=\"!showCategory\">\n          <div @click=\"showCategoryPanel()\" class=\"cursorPointer title hover displayInlineBlock\">\n            <i class=\"navigateIcons navigateIcon--left  fas fa-arrow-circle-left\"></i>\n            Subategories for <strong>'{{selectedCategory.name}}'</strong>:\n          </div>\n          <div>\n            <button v-bind:key=\"index\" class=\"tags clickBg\" v-for=\"(subCategory, index) in selectedCategory.subcategories\" @click=\"selectSubCategory(index)\">{{subCategory.name}}</button>\n          </div>\n        </div>\n      </div>\n      <!--  to display info about search -->\n      <div class=\"resultHeader textAlignLeft\">\n        {{currentMessage}}\n      </div>\n    </div>\n\n    <!--  Search result container that create grids of gif with search result -->\n    <searchResults\n      :searchKey=\"searchKeyText\"\n      :loader=\"fetchingGifs\"\n      :responseObj=\"responseData\"\n      :concatResults=\"concateIt\"\n      :searchType=\"currentSearchType\"\n      @searchAsTextFunction=\"searchSubcategoryAsText\"\n      :style=\"{'margin-top': stickyHeight}\">\n    </searchResults>\n\n    <!-- clicking the button scrolls to the top -->\n    <div class=\"scrollTopButton\" @click=\"scrollToTop()\">\n      <i class=\"fas fa-arrow-circle-up\"></i>\n    </div>\n  </div>\n</template>\n\n<script>\nimport search from '../components/search.vue'\nimport searchResults from '../components/searchResults.vue'\nimport commons from '../utils/common.js'\n\nimport Gify from '../sdk/gify'\n\nexport default {\n  name: 'SearchPage',\n  components: {\n    search,\n    searchResults\n  },\n  mounted () {\n    (document.body).addEventListener('scroll', this.updateScroll);\n  },\n\n  created () {\n    this.getCategories();\n    this.getTrendingGifs();\n    setTimeout(this.calculateStickyHeight, 1000);\n  },\n  computed: {\n    currentMessage () {\n      var obj = {\n        subCategory: 'Showing result for Subcategory :' + this.searchKeyText,\n        category: 'Showing result for Category : ' + this.searchKeyText,\n        trending: 'Trending GIFs !',\n        query: 'Showing result for text : ' + this.searchKeyText\n      }\n      return obj[this.currentSearchType]\n    }\n  },\n  data () {\n    return {\n      responseData: {},\n      page: 0,\n      fetchingGifs: false,\n      scrollPosition: null,\n      categories: [],\n      selectedCategory: {},\n      showCategory: true,\n      concateIt: false,\n      categoryPanel: null,\n      categoryPanelScrollHide: false,\n      stickyHeight: '100px',\n      currentSubCategory: '',\n      currentSearchedText: '',\n      currentSearchType: '',\n      currentSearchQuery: '',\n      currentCategory: '',\n      searchKeyText: ''\n    }\n  },\n\n  methods: {\n    scrollToTop () {\n      document.body.scrollTo(0, 0);\n    },\n\n    calculateStickyHeight () {\n      var elm = (document.getElementsByClassName('stickyContent'))[0];\n      var height = elm.clientHeight;\n      this.stickyHeight = (height - 1) + 'px';\n    },\n\n    // selection of a category\n    selectCategory (index) {\n      this.selectedCategory = this.categories[index];\n      this.showCategory = false;\n    },\n\n    // fired when search input is filled\n    searchThisInput (inputVal) {\n      var queryText = inputVal;\n      if (typeof inputVal !== 'string') {\n        queryText = inputVal.name\n        this.currentSearchQuery = queryText;\n      }\n      this.getResult(queryText)\n    },\n\n    // switches between category and subcategory\n    showCategoryPanel () {\n      this.showCategory = true;\n    },\n\n    resetCategoryPanelHeight (type) {\n      if (!this.categoryPanel) {\n        this.categoryPanel = (document.getElementsByClassName('categoryPanel'))[0];\n      }\n      if (type === 'show') {\n        this.categoryPanel.classList.remove('hide');\n      } else {\n        this.categoryPanel.classList.add('hide');\n      }\n    },\n\n    // events with body scroll\n    updateScroll (event) {\n      this.scrollPosition = window.scrollTop;\n      var element = event.target;\n      if (element.scrollTop > 60 && this.categoryPanelScrollHide === false) {\n        this.categoryPanelScrollHide = true;\n        this.resetCategoryPanelHeight('hide', element.scrollTop);\n      } else if (element.scrollTop < 60 && this.categoryPanelScrollHide === true){\n        this.categoryPanelScrollHide = false;\n        this.resetCategoryPanelHeight('show', element.scrollTop);\n      }\n      if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n        this.fetchApi();\n      }\n    },\n\n    // scroll checks and call the required api\n    fetchApi: commons.debounce( function() {\n      if (this.fetchingGifs === true) {\n        return\n      }\n      if (this.currentSearchType === 'subCategory') {\n        this.selectSubCategory(this.currentSubCategory)\n      } else if (this.currentSearchType === 'category') {\n        this.getGifForCategory(this.currentCategory);\n      } else if (this.currentSearchType === 'trending') {\n        this.getTrendingGifs();\n      } else {\n        this.getResult(this.currentSearchedText);\n      }\n    },500),\n\n    stopLoader () {\n      var that = this;\n      setTimeout(function(){\n        that.fetchingGifs = false;\n      }, 1000)\n    },\n\n    // not in use now\n    searchSubcategoryAsText () {\n      this.currentSearchQuery = this.currentSubCategory;\n      this.getResult(this.currentSubCategory);\n    },\n\n    // gets list of categories\n    getCategories () {\n      Gify.categoriesForGifs({})\n      .then((response) => {\n        this.categories = response.data;\n      })\n      .catch(() => {\n      })\n    },\n\n    // to fetch gif of a category\n    getGifForCategory (category) {\n      if (this.currentSearchType !== 'category') {\n        this.currentSearchType = 'category';\n        this.concateIt = false;\n        this.page = 0;\n      }\n\n      this.searchKeyText = category.name;\n      if (this.currentCategory === category.name) {\n        this.concateIt = true;\n      } else {\n        this.concateIt = false;\n        this.currentCategory = category.name\n      }\n      this.fetchingGifs = true;\n      Gify.subCategoriesForGifs(this.currentCategory, {\n        offset: this.page++,\n      })\n      .then((response) => {\n        this.responseData = response;\n        this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n\n    },\n\n    // to fetch gif of a subcategory\n    selectSubCategory (index) {\n      var subCategory = index;\n      if (typeof index === 'number'){\n        subCategory = this.selectedCategory.subcategories[index].name;\n      }\n      this.showCategory = false;\n      if (this.currentSearchType !== 'subCategory') {\n        this.currentSearchType = 'subCategory';\n        this.concateIt = false;\n        this.page = 0;\n      }\n      this.searchKeyText = subCategory;\n      if (this.currentSubCategory === subCategory) {\n        this.concateIt = true;\n      } else {\n        this.concateIt = false;\n        this.currentSubCategory = subCategory\n      }\n      this.fetchingGifs = true;\n\n      Gify.gifsByCategories(this.selectedCategory.name, subCategory, {\n        offset: this.page++,\n      })\n      .then((response) => {\n        this.responseData = response;\n        this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n    },\n\n    // to fetch gif of a search keyword\n    getResult (queryText) {\n      if (queryText.trim() === \"\") {\n        this.getTrendingGifs();\n        return;\n      }\n      if (this.currentSearchType !== 'query') {\n        this.currentSearchType = 'query';\n        this.concateIt = false;\n        this.page = 0;\n      }\n      this.searchKeyText = queryText;\n      if (this.currentSearchedText === queryText) {\n        this.concateIt = true;\n      } else {\n        this.currentSearchedText = queryText\n        this.concateIt = false;\n      }\n      this.fetchingGifs = true;\n      Gify.search('gifs', {\n          \"q\": queryText,\n          offset: this.page++,\n        }).then((response) => {\n          this.responseData = response;\n          this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n    },\n\n    // to fetch gif trending\n    getTrendingGifs () {\n      if (this.currentSearchType !== 'trending') {\n        this.currentSearchType = 'trending';\n        this.concateIt = false;\n        this.page = 0;\n      } else {\n        this.concateIt = true;\n      }\n      this.fetchingGifs = true;\n      Gify.trending(\"gifs\", {\n        offset: this.page++,\n      })\n      .then((response) => {\n        this.responseData = response;\n        this.stopLoader();\n      })\n      .catch(() => {\n        this.stopLoader();\n      })\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  .stickyContent{\n    width: 100%;\n    position: fixed;\n    top:0;\n    left: 0;\n    background: #fff;\n    z-index: 1000;\n    box-shadow: 0px 0px 5px 5px #ccc;\n\n  }\n  .resultHeader {\n    border-bottom: 1px solid #ddd;\n    width: 100%;\n    padding: 10px;\n    margin: 0 auto;\n  }\n  .groups {\n    overflow: auto;\n    text-align: left;\n    padding: 15px;\n    max-height: 120px\n  }\n  .groups.hide{\n    padding: 0px;\n    height: 0px;\n  }\n  .groups .title{\n    margin-bottom: 10px;\n  }\n  .groups .title.hover:hover {\n    color: #479b49;\n    transition: all 0.25s ease;\n  }\n  .scrollTopButton{\n    position: fixed;\n    bottom: 10px;\n    right: 10px;\n    font-size: 30px;\n    color: rgba(0,0,0,0.5);\n    cursor: pointer;\n  }\n  .scrollTopButton:hover{\n    color: #479b49;\n  }\n</style>\n"],"sourceRoot":"src/pages"}]}